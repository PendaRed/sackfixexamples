// Substitution syntax is ${foo.bar}
// Resolves by:
//   First all reference.conf files are merged and then the result gets resolved
//   Second all the application.conf are layered over the reference.conf and result of that gets resolved again
//
// reference.conf is for library projects, and should not have any unresolved tokens in it after merging.
// application.conf can have tokens which refer to values in reference.conf
//
// System properties can replace tokens.
// Environment variables can replace tokens using this syntax
//   basedir = "whatever"
//   basedir = ${?ENV_VAR_BASEDIR}
// If there is an environment variable called ENV_VAR_BASEDIR it will be used and replace "whatever" and
// if not then this line will be ignored.
//
session {
  // BeingStr and Sender/Target are case insensitive when matched
  BeginString=FIX.4.4
  SenderCompID=ExampleFixClient
  ConnectionType=initiator
  PathToFileStore=/all_dev/sackfix/sackfixexamples/sessmsgstore/initiator

  sessions = [
    {
      TargetCompID = ExampleFixServer
      ReconnectIntervalSecs = 60
      StartTime = "06:30:00"
      EndTime = "23:30:00"
      HeartBtIntSecs = 20
      // Only use after an intraday bounce when the sequence numbers are out of step.
      // You could also edit the sessions sequence number files. Values <1 are ignored
      ResetMyNextSeqNumTo=-1
      ResetTheirNextSeqNumTo=-1
      sockets = [
        {
//          SocketConnectHost = "192.168.1.22"
          SocketConnectHost = "192.168.1.11"
          SocketConnectPort = 1501
        }
//        {
//          SocketConnectHost = "123.123.123.124"
//          SocketConnectPort = 1501
//        }
      ]
    }
  ]
}

// Tell Akka to use SLF4J logging API, and look at logback
// http://rerun.me/2014/09/29/akka-notes-logging-and-testing/
// Just use SLF4J style logging everywhere, and it will convert.  And the logback.xml
// will be picked up by akka to tell it where to actually do the async logging
//
// You need to enable the Slf4jLogger in the loggers element in the Configuration. Here you can also
// define the log level of the event bus. More fine grained log levels can be defined in the configuration
// of the SLF4J backend (e.g. logback.xml). You should also define akka.event.slf4j.Slf4jLoggingFilter
// in the logging-filter configuration property. It will filter the log events using the backend
// configuration (e.g. logback.xml) before they are published to the event bus.
//
// Warning! If you set the loglevel to a higher level than "DEBUG", any DEBUG events will be filtered
// out already at the source and will never reach the logging backend, regardless of how the backend
// is configured.
akka{
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}